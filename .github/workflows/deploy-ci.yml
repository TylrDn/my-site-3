name: Deploy CI - MacroSight Static Site

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  validate-site:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: |
          npm install -g prettier htmlhint eslint
          
      - name: Lint and prettify HTML in public/
        run: |
          echo "üé® Prettifying HTML files in public/"
          prettier --write "public/*.html"
          echo "‚úÖ HTML files prettified"

      - name: Validate HTML files
        run: |
          echo "üîç Validating HTML files"
          htmlhint "public/*.html"
          echo "‚úÖ HTML validation complete"

      - name: Check for postMessage listeners in static HTML
        run: |
          echo "ÔøΩ Checking for postMessage listeners (should only be in embed.html)"
          files_with_listeners=$(grep -l "postMessage\|addEventListener" public/*.html | grep -v embed.html || true)
          
          if [[ -n "$files_with_listeners" ]]; then
            echo "‚ùå Found postMessage listeners in static HTML files:"
            echo "$files_with_listeners"
            for file in $files_with_listeners; do
              echo "- $file contains:"
              grep -n "postMessage\|addEventListener" "$file" || true
            done
            exit 1
          else
            echo "‚úÖ No postMessage listeners found in static HTML files"
          fi

        - name: Validate CORS headers via HTTP requests
          run: |
            echo "üåê Testing CORS headers and generating summary"

            # Base URLs for testing. Use production if reachable, otherwise fall back to Netlify
            PRIMARY_URL="https://www.macrosight.net"
            FALLBACK_URL="https://macrosight.netlify.app"

            # Create markdown summary
            echo "# MacroSight Deployment Summary" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "| Page | Status | CORS Header | Access-Control-Allow-Origin |" >> $GITHUB_STEP_SUMMARY
            echo "|------|--------|-------------|------------------------------|" >> $GITHUB_STEP_SUMMARY

            # Test all pages
            pages=("home" "about" "projects" "resume" "contact" "invest" "experience" "embed")
            failed=0

            for page in "${pages[@]}"; do
              echo "Testing ${page}.html..."

              # Try primary domain first
              response=$(curl -s -I "${PRIMARY_URL}/${page}.html" 2>/dev/null)
              status_code=$(echo "$response" | head -n 1 | awk '{print $2}')

              if [[ -z "$status_code" || "$status_code" != "200" ]]; then
                echo "Primary domain unavailable, trying Netlify fallback..."
                response=$(curl -s -I "${FALLBACK_URL}/${page}.html" 2>/dev/null || echo "FAILED")
                status_code=$(echo "$response" | head -n 1 | awk '{print $2}')
              fi

              if [[ "$response" == "FAILED" || -z "$status_code" ]]; then
                status="‚ùå FAILED"
                cors_status="‚ùå N/A"
                cors_header="N/A"
                failed=1
              else
                if [[ "$status_code" == "200" ]]; then
                  status="‚úÖ 200 OK"
                else
                  status="‚ùå $status_code"
                  failed=1
                fi

                cors_header=$(echo "$response" | grep -i "access-control-allow-origin" | cut -d' ' -f2- | tr -d '\r\n' || echo "Not found")

                if [[ "$cors_header" != "Not found" ]]; then
                  # All HTML files should return "*" to allow embedding
                  if [[ "$cors_header" == "*" ]]; then
                    cors_status="‚úÖ *"
                  else
                    cors_status="‚ùå Wrong (should be *)"
                    failed=1
                  fi
                else
                  cors_status="‚ùå Missing"
                  cors_header="Missing"
                  failed=1
                fi
              fi

              echo "| ${page}.html | $status | $cors_status | $cors_header |" >> $GITHUB_STEP_SUMMARY
            done
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Security Headers Check" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
            # Test security headers on main pages
            main_response=$(curl -s -I "${PRIMARY_URL}/home.html" 2>/dev/null)
            status_code=$(echo "$main_response" | head -n 1 | awk '{print $2}')

            if [[ -z "$status_code" || "$status_code" != "200" ]]; then
              main_response=$(curl -s -I "${FALLBACK_URL}/home.html" 2>/dev/null || echo "FAILED")
            fi

            if [[ "$main_response" != "FAILED" ]]; then
              hsts=$(echo "$main_response" | grep -i "strict-transport-security" || echo "")
              csp=$(echo "$main_response" | grep -i "content-security-policy" || echo "")
              xframe=$(echo "$main_response" | grep -i "x-frame-options" || echo "")
            
            echo "- HSTS: $([ -n "$hsts" ] && echo "‚úÖ Present" || echo "‚ùå Missing")" >> $GITHUB_STEP_SUMMARY
            echo "- CSP: $([ -n "$csp" ] && echo "‚úÖ Present" || echo "‚ùå Missing")" >> $GITHUB_STEP_SUMMARY
            echo "- X-Frame-Options: $([ -n "$xframe" ] && echo "‚úÖ Present" || echo "‚ùå Missing")" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ‚ùå Could not test security headers" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "_Generated on $(date)_" >> $GITHUB_STEP_SUMMARY
          
          if [[ $failed -eq 1 ]]; then
            echo "‚ùå Some CORS/HTTP checks failed"
            exit 1
          else
            echo "‚úÖ All CORS and HTTP checks passed"
          fi

      - name: Verify Netlify configuration
        run: |
          echo "üîß Verifying netlify.toml configuration"
          
          if [[ ! -f "netlify.toml" ]]; then
            echo "‚ùå netlify.toml not found"
            exit 1
          fi
          
          # Check required sections
          if grep -q "\[build\]" netlify.toml && grep -q "publish.*public" netlify.toml; then
            echo "‚úÖ Build configuration correct (publish = public)"
          else
            echo "‚ùå Build configuration missing or incorrect"
            exit 1
          fi
          
          if grep -q "\[\[headers\]\]" netlify.toml; then
            echo "‚úÖ Headers configuration found"
          else
            echo "‚ùå Headers configuration missing"
            exit 1
          fi
          
          if grep -q "\[\[redirects\]\]" netlify.toml; then
            echo "‚úÖ Redirects configuration found"
          else
            echo "‚ùå Redirects configuration missing"
            exit 1
          fi
          
          # Verify specific CORS rules
          if grep -A5 'for = "/\*\.html"' netlify.toml | grep -q 'Access-Control-Allow-Origin = "\*"'; then
            echo "‚úÖ HTML files CORS rule correct (Access-Control-Allow-Origin = *)"
          else
            echo "‚ùå HTML files CORS rule missing or incorrect"
            exit 1
          fi
          
          echo "‚úÖ Netlify configuration validation complete"
