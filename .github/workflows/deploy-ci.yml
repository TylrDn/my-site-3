name: Deploy CI - MacroSight Static Site

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  validate-site:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: |
          npm install -g prettier htmlhint eslint
          
      - name: Lint and prettify HTML in public/
        run: |
          echo "üé® Prettifying HTML files in public/"
          prettier --write "public/*.html"
          echo "‚úÖ HTML files prettified"

      - name: Validate HTML files
        run: |
          echo "üîç Validating HTML files"
          htmlhint "public/*.html"
          echo "‚úÖ HTML validation complete"

      - name: Check for postMessage listeners in static HTML
        run: |
          echo "ÔøΩ Checking for postMessage listeners (should only be in embed.html)"
          files_with_listeners=$(grep -l "postMessage\|addEventListener" public/*.html | grep -v embed.html || true)
          
          if [[ -n "$files_with_listeners" ]]; then
            echo "‚ùå Found postMessage listeners in static HTML files:"
            echo "$files_with_listeners"
            for file in $files_with_listeners; do
              echo "- $file contains:"
              grep -n "postMessage\|addEventListener" "$file" || true
            done
            exit 1
          else
            echo "‚úÖ No postMessage listeners found in static HTML files"
          fi

      - name: Verify Netlify configuration
        run: |
          echo "üîß Verifying netlify.toml configuration"
          
          if [[ ! -f "netlify.toml" ]]; then
            echo "‚ùå netlify.toml not found"
            exit 1
          fi
          
          # Check required sections
          if grep -q "\[build\]" netlify.toml && grep -q "publish.*public" netlify.toml; then
            echo "‚úÖ Build configuration correct (publish = public)"
          else
            echo "‚ùå Build configuration missing or incorrect"
            exit 1
          fi
          
          if grep -q "\[\[headers\]\]" netlify.toml; then
            echo "‚úÖ Headers configuration found"
          else
            echo "‚ùå Headers configuration missing"
            exit 1
          fi
          
          if grep -q "\[\[redirects\]\]" netlify.toml; then
            echo "‚úÖ Redirects configuration found"
          else
            echo "‚ùå Redirects configuration missing"
            exit 1
          fi
          
          # Verify specific CORS rules
          if grep -A5 'for = "/\*\.html"' netlify.toml | grep -q 'Access-Control-Allow-Origin = "\*"'; then
            echo "‚úÖ HTML files CORS rule correct (Access-Control-Allow-Origin = *)"
          else
            echo "‚ùå HTML files CORS rule missing or incorrect"
            exit 1
          fi
          
          echo "‚úÖ Netlify configuration validation complete"
